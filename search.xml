<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>我的文档</title>
      <link href="/2018/09/22/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/"/>
      <url>/2018/09/22/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<!-- RES --><!-- /RES --><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><blockquote><p>14 章节：编写自己的输入输出运算符<br>17 章节：控制输入输出格式， 对文件进行随机访问</p></blockquote><ul><li>C++ 语言不直接处理输入输出，而通过 IO 库来处理 IO。</li><li>IO 库定义了读写<strong>内置类型</strong>值的操作。</li><li>其他类可定义类似的 IO 操作，来读写自己的对象。</li><li><p>这些类被分别定义于三个头文件之中：</p><ul><li>iostream 头文件中定义了读写<strong>普通流（控制台）</strong>的基本类型。  </li><li>fstream 头文件中的定义了读写<strong>命名文件</strong>的类型。</li><li>stringstream 头文件中定义了读写<strong>内存 string 对象</strong>的类型。</li></ul></li><li><p>IO 库类型概述：</p></li></ul><p><img src="/res/mdImg/IO操作类图.png" alt="IO操作类图"></p><table><thead><tr><th style="text-align:center">头文件</th><th style="text-align:center">类型</th><th style="text-align:center">类型（对于宽字符)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;iostream&gt;</code></td><td style="text-align:center"><code>istream</code></td><td style="text-align:center"><code>wistream</code></td><td style="text-align:left">从流读取数据</td></tr><tr><td style="text-align:center">&nbsp;</td><td style="text-align:center"><code>ostream</code></td><td style="text-align:center"><code>wostream</code></td><td style="text-align:left">向流写入数据</td></tr><tr><td style="text-align:center">&nbsp;</td><td style="text-align:center"><code>iostream</code></td><td style="text-align:center"><code>wiostream</code></td><td style="text-align:left">读写流</td></tr><tr><td style="text-align:center"><code>&lt;fstream&gt;</code></td><td style="text-align:center"><code>ifstream</code></td><td style="text-align:center"><code>wifstream</code></td><td style="text-align:left">从文件读取数据</td></tr><tr><td style="text-align:center">&nbsp;</td><td style="text-align:center"><code>ofstream</code></td><td style="text-align:center"><code>wofstream</code></td><td style="text-align:left">向文件写入数据</td></tr><tr><td style="text-align:center">&nbsp;</td><td style="text-align:center"><code>fstream</code></td><td style="text-align:center"><code>wfstream</code></td><td style="text-align:left">读写文件</td></tr><tr><td style="text-align:center"><code>&lt;sstream&gt;</code></td><td style="text-align:center"><code>istringstream</code></td><td style="text-align:center"><code>wistringstream</code></td><td style="text-align:left">从 string 读取数据</td></tr><tr><td style="text-align:center">&nbsp;</td><td style="text-align:center"><code>ostringstream</code></td><td style="text-align:center"><code>wostringstream</code></td><td style="text-align:left">向 string 写入数据</td></tr><tr><td style="text-align:center">&nbsp;</td><td style="text-align:center"><code>stringstream</code></td><td style="text-align:center"><code>wstringstream</code></td><td style="text-align:left">读写 string</td></tr></tbody></table><ul><li><p>为了支持使用<strong>宽字符</strong>的语言，标准库定义了一组类型和对象，用于操作<code>wchar_t</code>宽字符类型。 宽字符版本的类型 / 函数的名字以<code>w</code>开头，宽字符版本类型和对象与其对应的普通 char 版本类型在同一文件中。</p><ul><li>eg：cin, cout, cerr 对象分别对应 wcin, wcout, wcerr 对象。</li><li>eg: <fstream> 中有 ifstream 和 wifstream 两个类。</fstream></li></ul></li><li><p>IO 类型之间关系：通过继承体系，使得可以用类似的方式使用这些类的对象。(eg: 可使用操作<code>cin</code>的方式，操作<code>istream</code>和<code>istringstream</code>类的对象)</p></li><li>类继承关系描述：（附件中有类继承关系图）<ul><li>ifstream，istringstream 继承自 istream。</li><li>ofstream，ostringstream 继承自 ostream。</li><li>iostream 多重继承了 istream，ostream。</li><li>fstream，stringstream 继承自 iostream。</li></ul></li></ul><h1 id="2-标准输入输出"><a href="#2-标准输入输出" class="headerlink" title="2. 标准输入输出"></a>2. 标准输入输出</h1><blockquote><p>需添加头文件：<code>#include &lt;iostream&gt;</code></p></blockquote><h2 id="2-1-类型"><a href="#2-1-类型" class="headerlink" title="2.1. 类型"></a>2.1. 类型</h2><ul><li><code>std::cin</code></li><li><code>std::cout</code></li><li><code>std::cerr</code></li><li><code>std::clog</code></li></ul><h2 id="2-2-操作符"><a href="#2-2-操作符" class="headerlink" title="2.2. 操作符"></a>2.2. 操作符</h2><ul><li><code>&lt;&lt;</code></li><li><code>&gt;&gt;</code></li><li><code>std::endl</code><ol><li>结束当前行</li><li>将与设备关联的缓冲区中内容刷新到设备</li></ol></li></ul><h1 id="3-iostream-头文件"><a href="#3-iostream-头文件" class="headerlink" title="3. iostream 头文件"></a>3. <code>iostream</code> 头文件</h1><h2 id="3-1-cin-cout-cerr"><a href="#3-1-cin-cout-cerr" class="headerlink" title="3.1. cin cout cerr"></a>3.1. <code>cin</code> <code>cout</code> <code>cerr</code></h2><ul><li><code>istream</code>类的<code>cin</code>对象：用于从标准输入读取数据。可使用<code>&gt;&gt;</code>和<code>getline()</code>.</li><li><code>ostream</code>类的以下对象：<ul><li><code>cout</code>对象：从标准输出输出数据。可使用<code>&lt;&lt;</code>.</li><li><code>cerr</code>对象：向标准错误输出数据。可使用<code>&lt;&lt;</code>.</li></ul></li></ul><h1 id="4-IO-库流特性"><a href="#4-IO-库流特性" class="headerlink" title="4. IO 库流特性"></a>4. IO 库<strong>流特性</strong></h1><ul><li>IO 库流特性可无差别的用于普通流，文件流，string 流，char 或 宽字符流中。</li></ul><h2 id="4-1-IO-对象的传递"><a href="#4-1-IO-对象的传递" class="headerlink" title="4.1. IO 对象的传递"></a>4.1. IO 对象的传递</h2><ul><li>只能使用 <strong>非 const 的指针或引用</strong> 传递。</li><li>原因：<ul><li>不可为<code>const</code>类型。因为读写 IO 对象都会改变其状态。</li><li>只能使用<strong>指针或引用</strong>传递。因为无法对 IO 对象进行<strong>拷贝</strong>或<strong>赋值</strong>。（函数<strong>形参</strong>和<strong>返回值</strong>类型不可为 IO 流类型）。</li></ul></li><li><p>代码</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="function">iostream &amp;<span class="title">func</span><span class="params">(iostream &amp;io, fstream *fs)</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="function">iostream <span class="title">func</span><span class="params">(iostream io)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2-流的条件状态"><a href="#4-2-流的条件状态" class="headerlink" title="4.2. 流的条件状态"></a>4.2. 流的<strong>条件状态</strong></h2><ul><li><strong>任何一个</strong> IO 对象在<strong>任何时刻</strong>都对应一种状态。</li><li>作用：用于保存 IO 对象的状态。</li><li>产生的原因：IO 操作本身可能会发生错误，且有些错误发生在系统深处，应用程序无法对其修正。所以需要存储 IO 对象本身的状态，供程序访问和修改。</li><li><p>注意：</p><ul><li>因为只有当一个流处于无错误状态下，才能通过它进行正确的读写。</li><li>且对一个已出错的流进行后续 IO 操作，都会失败。</li><li><p>所以要在每次使用流之前，先检查该流的状态。</p><blockquote><p>cin 希望读取 int 型的值。当输入内容非 int 时（eg: 输入了 EOF 或一串字符串），cin 会处于错误状态（strm::filebit）。之后对 cin 的后续操作也会出错。</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a<span class="comment">;</span></span><br><span class="line">cin &gt;&gt; a<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-2-1-条件状态"><a href="#4-2-1-条件状态" class="headerlink" title="4.2.1. 条件状态"></a>4.2.1. 条件状态</h3><blockquote><p>strm 表示 各个 IO 库类型（eg：istream， iostream）。</p></blockquote><ul><li>使用<code>strm::iostate</code>类型表示流对象的条件状态。本类型是<strong>机器相关类型</strong>。</li><li>该类型本质为一种<strong>位集合</strong>。其中有四种该类型的<code>constexpr</code>枚举值。可使用<strong>位运算符</strong>来同时操作多个位。</li><li>本类型枚举值：</li></ul><table><thead><tr><th style="text-align:center">位模式</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>strm::badbit</code></td><td style="text-align:left">流已崩溃（出现系统级错误，无法再使用时）</td></tr><tr><td style="text-align:center"><code>strm::failbit</code></td><td style="text-align:left">一个 IO 操作失败，修正后流仍可使用<br>（eg：希望读一个 int 却读到字符时）</td></tr><tr><td style="text-align:center"><code>strm::eofbit</code></td><td style="text-align:left">流到达了文件末尾，同时 filebit 也会置位</td></tr><tr><td style="text-align:center"><code>strm::goodbit</code></td><td style="text-align:left">流未处于错误状态，此值为 0</td></tr></tbody></table><h3 id="4-2-2-条件状态的操作函数"><a href="#4-2-2-条件状态的操作函数" class="headerlink" title="4.2.2. 条件状态的操作函数"></a>4.2.2. 条件状态的操作函数</h3><blockquote><p>s 表示一个流对象（eg: cin）<br>flags 类型为 strm::state。（eg: cin::badbit | cin::filebit）</p></blockquote><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>s.eof(): bool</code></td><td style="text-align:left">判断 s 流的<code>eofbit</code>是否置位</td></tr><tr><td style="text-align:center"><code>s.fail(): bool</code></td><td style="text-align:left">判断 s 流的<code>failbit</code>或<code>badbit</code>是否置位</td></tr><tr><td style="text-align:center"><code>s.bad(): bool</code></td><td style="text-align:left">判断 s 流的<code>badbit</code>是否置位</td></tr><tr><td style="text-align:center"><code>s.good(): bool</code></td><td style="text-align:left">判断 s 流是否处于有效状态</td></tr><tr><td style="text-align:center"><code>s.clear()</code></td><td style="text-align:left">将流 s 所有条件状态位复位，<br>并将流状态设为有效</td></tr><tr><td style="text-align:center"><code>s.clear(flags)</code></td><td style="text-align:left">将流对应的状态位复位</td></tr><tr><td style="text-align:center"><code>s.setstate(flags)</code></td><td style="text-align:left">将流对应的状态位置位</td></tr><tr><td style="text-align:center"><code>s.rdstate(): strm::iostate</code></td><td style="text-align:left">返回流 s 的当前条件状态</td></tr></tbody></table><h3 id="4-2-3-代码示例"><a href="#4-2-3-代码示例" class="headerlink" title="4.2.3. 代码示例"></a>4.2.3. 代码示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> myChar;</span><br><span class="line">    <span class="comment">// 先判断流是否有效，再执行后续 IO 操作。等价于：cin.good()</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; myChar) &#123;</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// auto 类型为 cin::state</span></span><br><span class="line">    <span class="keyword">auto</span> oldState = <span class="built_in">cin</span>.rdstate();    <span class="comment">// 读取 cin 的状态</span></span><br><span class="line">    <span class="built_in">cin</span>.clear(<span class="built_in">cin</span>.failbit &amp; <span class="built_in">cin</span>.badbit);    <span class="comment">// 清除指定位</span></span><br><span class="line">    <span class="built_in">cin</span>.setState(oldState);            <span class="comment">// 设置状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 输出 0 1 2 4</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::iostream::good &lt;&lt; <span class="built_in">std</span>::iostream::badbit</span><br><span class="line">        &lt;&lt; <span class="built_in">std</span>::iostream::eofbit &lt;&lt; <span class="built_in">std</span>::iostream::failbit &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::iostream::iostate coutstate = <span class="built_in">cin</span>.rdstate(); <span class="comment">// 得到 cin 对象的原始状态值</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; coutstate &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 输出 0 cin 的状态值是 std::iostream::good</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i; <span class="comment">// 输入"123"</span></span><br><span class="line">    <span class="comment">// 输出 0 因为“123”可以被正确转成 int 并被存入 i 所以 cin 的状态置为 std::iostream::good</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">cin</span>.rdstate() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    <span class="comment">// 输出 1 0 0 0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">cin</span>.good() &lt;&lt; <span class="built_in">cin</span>.eof() &lt;&lt; <span class="built_in">cin</span>.fail() &lt;&lt; <span class="built_in">cin</span>.bad() &lt;&lt; end;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i; <span class="comment">// 输入"abd"</span></span><br><span class="line">    <span class="comment">// 输出 4  因为“abc”无法转成 int 存入 i 所以 cin 的状态置为 std::iostream::failbit</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">cin</span>.rdstate() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 输出 0 0 1 0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">cin</span>.good() &lt;&lt; <span class="built_in">cin</span>.eof() &lt;&lt; <span class="built_in">cin</span>.fail() &lt;&lt; <span class="built_in">cin</span>.bad() &lt;&lt; end;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 重置 cin 状态为 std::iostream::good 否则下面的 cin &lt;&lt; i 不会执行</span></span><br><span class="line">    <span class="comment">// 使用其等效：cin.clear(std::iostream::failbit)</span></span><br><span class="line">    <span class="built_in">cin</span>.clear();</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i; <span class="comment">// 输入"568"</span></span><br><span class="line">    <span class="comment">// 输出 0 因为“568”可以被正确转成 int 并被存入 i 所以 cin 的状态置为 std::iostream::good</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">cin</span>.rdstate() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 输出 1 0 0 0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">cin</span>.good() &lt;&lt; <span class="built_in">cin</span>.eof() &lt;&lt; <span class="built_in">cin</span>.fail() &lt;&lt; <span class="built_in">cin</span>.bad() &lt;&lt; end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-缓冲区"><a href="#4-3-缓冲区" class="headerlink" title="4.3. 缓冲区"></a>4.3. 缓冲区</h2><ul><li>缓冲区也称为<strong>缓存</strong>，是内存空间的一部分。</li><li>作用：在输入输出设备与 CPU 之间，用来缓存数据。使得低速的 IO 设备与高速的 CPU 能够协调工作。</li></ul><h3 id="4-3-1-缓冲区的类型"><a href="#4-3-1-缓冲区的类型" class="headerlink" title="4.3.1. 缓冲区的类型"></a>4.3.1. 缓冲区的类型</h3><ul><li>根据与其相对应的设备是输入设备还是输出设备， 可分为两类：<ul><li>输入缓冲区</li><li>输出缓冲区</li></ul></li><li>根据缓冲区刷新， 可分为三类：<ul><li>全缓冲</li><li>行缓冲</li><li>不带缓冲</li></ul></li></ul><h4 id="4-3-1-1-全缓冲"><a href="#4-3-1-1-全缓冲" class="headerlink" title="4.3.1.1. 全缓冲"></a>4.3.1.1. 全缓冲</h4><ul><li>当填满缓冲区之后，才刷新缓冲区，执行真正 IO 操作。</li><li>典型代表：对磁盘文件的读取。</li><li><p>代码示例</p><blockquote><p>测试写入文件对应的是否为全缓冲<br>windows 全缓冲大小为 4K（4096 字节）。</p></blockquote>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">"F:\\test.txt"</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// windows 全缓存区大小为 4K(4096). 存储第 4097 字节时就会进行刷新全缓存区。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4096</span>; ++i) &#123;</span><br><span class="line">    outfile &lt;&lt; <span class="string">"a"</span>;     <span class="comment">// 添加 endl，flush 语句会刷新</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">system(<span class="string">"PAUSE"</span>);    <span class="comment">// 按任意键继续</span></span><br><span class="line"> </span><br><span class="line">outfile &lt;&lt; <span class="string">"b"</span>;        <span class="comment">// 缓冲区满了，开始刷新</span></span><br><span class="line">system(<span class="string">"PAUSE"</span>);</span><br><span class="line"> </span><br><span class="line">outfile.close();    <span class="comment">// 关闭文件，会刷新</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-1-2-行缓冲"><a href="#4-3-1-2-行缓冲" class="headerlink" title="4.3.1.2. 行缓冲"></a>4.3.1.2. 行缓冲</h4><ul><li>在输入输出过程中，遇到<strong>换行符</strong>时，刷新缓冲区，执行真正 IO 操作。</li><li>典型代表：从键盘输入数据。输入的字符先存入缓冲区，等按下回车按键后，才真正读入数据。</li><li><p>代码示例</p><blockquote><ul><li>以通过 getchar() 读取 cin 为示例。证实 cin 并不是用户输入之后，在程序里就能立即得到的。</li><li>实验结果：例如用户输入了 iostream 回车 这一串，只有输入回车后，才能看到输出了 “a: i”</li></ul></blockquote>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首次执行本函数，阻塞等待用户输入，并将用户输入内容保存到输入缓存区，直到输入 回车（回车也放入缓存区), 函数返回第一个输入的第一个字符。</span></span><br><span class="line"><span class="comment">// 之后执行本函数，只要缓存区中存在字符，就直接返回。直到将缓存区内容全部读取完成。</span></span><br><span class="line"><span class="keyword">char</span> a = getchar();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (a = getchar()) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"while a: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-1-3-不带缓冲"><a href="#4-3-1-3-不带缓冲" class="headerlink" title="4.3.1.3. 不带缓冲"></a>4.3.1.3. 不带缓冲</h4><ul><li>不进行缓冲，程序的读写操作会直接引发真正的 IO 操作。</li><li>典型代表：stderr 的输出。以便错误信息可以尽快显示出来。</li><li><p>代码示例</p><blockquote><p>疑惑之处：将 cerr 替换为 cout 之后，在“输入任意字符”之前，也会有 ‘a’ 输出。不是此时应该还在缓冲区没有被刷新的吗 ？？？</p></blockquote>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"a"</span>;</span><br><span class="line">system(<span class="string">"PAUSE"</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"b"</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-2-缓冲区的刷新"><a href="#4-3-2-缓冲区的刷新" class="headerlink" title="4.3.2. 缓冲区的刷新"></a>4.3.2. 缓冲区的刷新</h3><ul><li>缓冲区的刷新时机如下：<ul><li>缓冲区已满，再向缓冲区写入数据时。</li><li>文件正常关闭时（程序正常退出时）(main 函数 return 操作时，会刷新输出缓冲)。</li><li><a href="#显式刷新缓冲区">显式刷新缓冲区</a>。</li><li><a href="#设置缓冲区是否立即刷新">设置缓冲区是否立即刷新</a>。</li><li><a href="#关联流">将输出流关联到另一个流</a>。一个输出流 A 关联到另一个流 B 时，读写流 B，都会使输出流 A 被刷新。</li></ul></li><li>注意：<ul><li>程序非正常退出，将不会刷新输出缓冲。</li></ul></li></ul><h4 id="4-3-2-1-显式刷新缓冲区"><a href="#4-3-2-1-显式刷新缓冲区" class="headerlink" title="4.3.2.1. 显式刷新缓冲区"></a>4.3.2.1. <span id="显式刷新缓冲区">显式刷新缓冲区</span></h4><ul><li>能进行显式刷新缓冲区的操作符：</li></ul><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>endl</code>操作符</td><td style="text-align:left">插入一个换行符，并刷新缓冲区</td></tr><tr><td style="text-align:center"><code>ends</code>操作符</td><td style="text-align:left">插入一个空字符，并刷新缓冲区</td></tr><tr><td style="text-align:center"><code>flush</code>操作符</td><td style="text-align:left">直接刷新缓冲区</td></tr></tbody></table><ul><li>代码示例  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hehe"</span> &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">// "hehe"换行</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hehe"</span> &lt;&lt; ends;    <span class="comment">// "hehe"空字符</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hehe"</span> &lt;&lt; flush;    <span class="comment">// "hehe"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-2-2-设置缓冲区是否立即刷新"><a href="#4-3-2-2-设置缓冲区是否立即刷新" class="headerlink" title="4.3.2.2. 设置缓冲区是否立即刷新"></a>4.3.2.2. <span id="设置缓冲区是否立即刷新">设置缓冲区是否立即刷新</span></h4><ul><li>使用 <code>unitbuf</code> 操作符设置缓冲区在每次写入后都将刷新。</li><li>使用 <code>nounitbuf</code> 操作符设置缓冲区恢复正常的缓冲机制。</li><li><p>代码示例</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置之后，在每次输出操作后，都将立即刷新缓冲区</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; unitbuf;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">123</span>;    <span class="comment">// 立即刷新</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置之后，恢复为正常的缓冲机制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; nounitbuf;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">123</span>;    <span class="comment">// 使用正常的缓冲</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-2-3-将输出流关联到输入流"><a href="#4-3-2-3-将输出流关联到输入流" class="headerlink" title="4.3.2.3. 将输出流关联到输入流"></a>4.3.2.3. <span id="关联流">将输出流关联到输入流</span></h4><ul><li>将一个<strong>输出流</strong>（A）关联到另一个流（可为输入或输出流）（B，C，D）。</li><li>作用：用于简化输出流（A）的刷新。</li><li>本流（B）只能设置一个关联的输出流（A）。 但一个输出流（A）可关联到多个流（B，C，D）。</li><li>操作：使用函数<code>tie()</code>其有两个重载：<ol><li>不带参数，返回本对象当前关联到的输出流指针。若无，则返回空指针。</li><li>接受一个指向<code>ostream</code>的指针，将本对象关联到该输出流。返回值同上。</li></ol></li><li>默认情况下，<code>cout</code>会关联到<code>cin</code>和<code>cerr</code>，则读<code>cin</code>或写<code>cerr</code>都会使<code>cout</code>流刷新。</li><li>代码  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cout 关联到 cin （仅作为展示。原本就已关联)</span></span><br><span class="line"><span class="built_in">cin</span>.tie(&amp;<span class="built_in">cout</span>);   </span><br><span class="line"> </span><br><span class="line"><span class="comment">//cin 不与其他流关联，并返回之前关联的输出流（如果有的话)</span></span><br><span class="line">ostream * oldTie = <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="5-文件读取类"><a href="#5-文件读取类" class="headerlink" title="5. 文件读取类"></a>5. 文件读取类</h1><ul><li>头文件<code>&lt;fstream&gt;</code>中有三个类：<code>ifstream</code>，<code>ofstream</code>，<code>fstream</code>。分别继承自<code>istream</code>， <code>ostream</code>，<code>iostream</code>。因此可使用父类全部功能。</li><li>注意：当一个 fstream 对象被销毁时，将会自动 close 该文件。</li></ul><h2 id="5-1-打开文件"><a href="#5-1-打开文件" class="headerlink" title="5.1. 打开文件"></a>5.1. 打开文件</h2><ul><li>可使用 <code>open()</code>函数</li><li>也可直接使用文件读取类的构造函数完成（参数与 open() 函数一致）。</li><li><p><code>open()</code>函数原型</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filename: 要打开的文件名</span></span><br><span class="line"><span class="comment">//mode: 打开文件的方式</span></span><br><span class="line"><span class="comment">//access: 待打开文件的属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">int</span> mode, <span class="keyword">int</span> access)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-1-1-打开文件的方式"><a href="#5-1-1-打开文件的方式" class="headerlink" title="5.1.1. 打开文件的方式"></a>5.1.1. 打开文件的方式</h3><ul><li>在类 <code>ios</code>（所有流式 IO 类的基类）中定义。可使用<code>|</code>运算符将多值组合使用。<blockquote><p>『问题 Q]： ios::nocreate 和 ios::noreplace 在 VS 的参数自动完成中为：ios::_Nocreate 和 ios::_Noreplace。这到底是哪个正确？？？</p></blockquote></li></ul><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>ios::in</code></td><td style="text-align:center">以输入方式打开</td></tr><tr><td style="text-align:center"><code>ios::out</code></td><td style="text-align:center">以输出方式打开（文件不存在则创建）</td></tr><tr><td style="text-align:center"><code>ios::app</code></td><td style="text-align:center">以追加的方式打开文件（文件写指针在文件结尾）</td></tr><tr><td style="text-align:center"><code>ios::ate</code></td><td style="text-align:center">文件打开后定位到文件结尾（app 内包含此项）</td></tr><tr><td style="text-align:center"><code>ios::trunc</code></td><td style="text-align:center">打开并截断文件</td></tr><tr><td style="text-align:center"><code>ios::binary</code></td><td style="text-align:center">以二进制方式打开文件『默认为文本方式』</td></tr><tr><td style="text-align:center"><code>ios::nocreate</code></td><td style="text-align:center">不创建文件（文件不存在时打开失败）</td></tr><tr><td style="text-align:center"><code>ios::noreplace</code></td><td style="text-align:center">不覆盖文件（打开文件时若文件已存在则失败）</td></tr></tbody></table><ul><li>说明<ul><li><code>in</code>模式只可用于<code>ifstream</code>和<code>fstream</code>对象。</li><li><code>out</code>模式只可用于<code>ofstream</code>和<code>fstream</code>对象。默认情况下，即使未指定<code>trunc</code>, 打开的文件也会被截断。若想文件不被截断，需同时指定<code>app</code>或同时指定<code>in</code>以既可读又可写的方式打开。</li><li><code>trunc</code>只有在<code>out</code>模式下才能被设置。</li><li><code>app</code>只有在<code>trunc</code>未被设置的情况下，才能被设置。当<code>app</code>设置后，即使<code>out</code>未设置，也是以写方式打开。</li><li><code>ate</code>和<code>binary</code>可用于任何类型的文件流对象。且可与其他模式任意配合使用。</li></ul></li><li>默认打开方式：当未指定文件打开模式时，会使用默认模式打开文件。<ul><li>与<code>ifstream</code>关联的文件默认以<code>in</code>模式打开。</li><li>与<code>ofstream</code>关联的文件默认以<code>out</code>模式打开。</li><li>与<code>fstream</code>关联的文件默认以<code>in</code>和<code>out</code>模式打开。</li></ul></li></ul><h3 id="5-1-2-待打开文件的属性"><a href="#5-1-2-待打开文件的属性" class="headerlink" title="5.1.2. 待打开文件的属性"></a>5.1.2. 待打开文件的属性</h3><ul><li>可使用 <code>|</code> 或 <code>+</code> 将多值组合使用。<blockquote><p>『问题 Q]： 在 VS 中，可查看到该参数的默认值为 64。这是怎么组合得到的？ 难道 C++11 对该部分作了修改？？?<br>一般不使用。直接使用默认形参就行。</p></blockquote></li></ul><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">普通文件，打开访问</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">只读文件</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">隐含文件</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">系统文件</td></tr></tbody></table><h3 id="5-1-3-代码示例"><a href="#5-1-3-代码示例" class="headerlink" title="5.1.3. 代码示例"></a>5.1.3. 代码示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::fstream file;</span><br><span class="line">    file.open(<span class="string">"E:\\test.txt"</span>, <span class="built_in">std</span>::ios::out | <span class="built_in">std</span>::ios::app);</span><br><span class="line">    <span class="comment">// 等价于</span></span><br><span class="line">    <span class="comment">// std::fstream file("E:\\test.txt", std::ios::out | std::ios::app);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-关闭文件"><a href="#5-2-关闭文件" class="headerlink" title="5.2. 关闭文件"></a>5.2. 关闭文件</h2><ul><li>使用 <code>close()</code> 关闭文件。</li></ul><h2 id="5-3-读写文件"><a href="#5-3-读写文件" class="headerlink" title="5.3. 读写文件"></a>5.3. 读写文件</h2><ul><li>读写文件可分为 <strong>对二进制文件读写</strong> 和 <strong>对文本文件读写</strong>。</li><li>对文本文件读写，可直接使用 <code>&gt;&gt;</code> 和 <code>&lt;&lt;</code>。</li><li>对二进制文件读写，使用 <code>&gt;&gt;</code> 和 <code>&lt;&lt;</code> 无意义。</li></ul><h3 id="5-3-1-读写文本文件"><a href="#5-3-1-读写文本文件" class="headerlink" title="5.3.1. 读写文本文件"></a>5.3.1. 读写文本文件</h3><ul><li>使用 <code>&gt;&gt;</code> 读取数据。</li><li>使用 <code>&lt;&lt;</code> 写出数据。</li><li>本方式有一定的数据格式化能力：使用以下操作符</li></ul><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">说明</th><th style="text-align:center">输入或输出</th></tr></thead><tbody><tr><td style="text-align:center"><code>hex</code></td><td style="text-align:center">格式化为<strong>十六进制</strong>数值数据</td><td style="text-align:center">输入输出</td></tr><tr><td style="text-align:center"><code>oct</code></td><td style="text-align:center">格式化为<strong>八进制</strong>数值数据</td><td style="text-align:center">输入输出</td></tr><tr><td style="text-align:center"><code>dec</code></td><td style="text-align:center">格式化为<strong>十进制</strong>数值数据</td><td style="text-align:center">输入输出</td></tr><tr><td style="text-align:center"><code>endl</code></td><td style="text-align:center">输出一个换行符，并刷新缓冲区</td><td style="text-align:center">输出</td></tr><tr><td style="text-align:center"><code>ends</code></td><td style="text-align:center">输出一个空字符</td><td style="text-align:center">输出</td></tr></tbody></table><ul><li><p>使用示例</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fstream <span class="title">file</span><span class="params">(<span class="string">"test.txt"</span>, ios::in|ios::out)</span></span>;</span><br><span class="line"> </span><br><span class="line">file &lt;&lt; hex &lt;&lt; <span class="number">15</span>;    <span class="comment">// 把 123 以十六进制方式输出： f</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3-2-读写二进制文件"><a href="#5-3-2-读写二进制文件" class="headerlink" title="5.3.2. 读写二进制文件"></a>5.3.2. 读写二进制文件</h3><ul><li><p>使用 <code>put()</code> 写一个字符</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream &amp;<span class="title">put</span><span class="params">(<span class="keyword">char</span> ch)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用 <code>get()</code> 读</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从流中读取一个字符，存于 ch. 若读到文件结尾，返回空字符。</span></span><br><span class="line"><span class="function">ifstream &amp;<span class="title">get</span><span class="params">(<span class="keyword">char</span> &amp;ch)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从流中返回一个字符。若达到文件结尾，返回 EOF</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 把字符读入到 buf 中。直到读入了 num 个字符或读到 delim 指定的字符后返回。</span></span><br><span class="line"><span class="function">ifstream &amp;<span class="title">get</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> num, <span class="keyword">char</span> delim=<span class="string">'\n'</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>读写数据块</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read(<span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> num);</span><br><span class="line">write(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-4-检测"><a href="#5-4-检测" class="headerlink" title="5.4. 检测"></a>5.4. 检测</h2><ul><li>检测文件是否已打开： <code>bool is_open() const;</code></li><li>检测是否达到文件末尾： <code>int eof();</code> 达到末尾返回<strong>非零值</strong>，否则返回 0。</li></ul><h2 id="5-5-流指针"><a href="#5-5-流指针" class="headerlink" title="5.5. 流指针"></a>5.5. 流指针</h2><ul><li>C++ 通过维护<strong>流指针</strong>来对流的读写位置进行控制。</li><li>每次执行输入或输出后，对应指针会<strong>自动</strong>变化。</li><li>读指针：get pointer，指向下一个被读取的元素。</li><li>写指针：put pointer，指向下一个元素的位置。</li><li>ifstream，istream 有读指针。</li><li>ofstream，ostream 有写指针。</li><li><p>fstream，iostream 既有读指针，又有写指针。</p></li><li><p>指针位置类型为 pos_type。（是一个整数）。</p></li><li>获取指针位置<ul><li><code>tellg()</code>：获取读指针位置。</li><li><code>tellp()</code>：获取写指针位置。</li></ul></li><li>设置指针位置。有两种重载。</li><li><p>对于 文本文件 只是用第一种重载。且 opsition 就是 获取到的指针位置，而不能对其进行修改。</p><ul><li>因为流指针的值对于文本文件和二进制文件的计算方法不同。为了防止文本文件中某些特殊字符被修改。</li></ul></li><li><p>第一种重载。从文件开头开始计算位置。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seekg(pos_type position);</span><br><span class="line">seekp(pos_type position);</span><br></pre></td></tr></table></figure></li><li><p>第二种重载。可指定偏移量的计算位置。</p><blockquote><ul><li>offset 为偏移的基准点，可取以下值：<ul><li>ios::beg 流开始位置</li><li>ios::cur 流当前位置</li><li>ios::end 流末尾位置</li></ul></li></ul></blockquote>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seekg(off_type offset, seekdir direction);</span><br><span class="line">seekp(off_type offset, seekdir direction);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码示例</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">ifstream <span class="title">file</span><span class="params">(<span class="string">"F:\\test.txt"</span>, <span class="built_in">std</span>::ios::in | <span class="built_in">std</span>::ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">long</span> start, end;</span><br><span class="line">    start = file.tellg();    <span class="comment">// 获取文件开头位置</span></span><br><span class="line"> </span><br><span class="line">    file.seekg(<span class="number">0</span>, <span class="built_in">std</span>::ios::end);    <span class="comment">// 移动读指针到文件末尾</span></span><br><span class="line">    end = file.tellg();        <span class="comment">// 获取文件结尾位置</span></span><br><span class="line">    file.close();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size: (bytes)"</span> &lt;&lt; end - start &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="6-sstream-头文件"><a href="#6-sstream-头文件" class="headerlink" title="6. sstream 头文件"></a>6. <code>sstream</code> 头文件</h1><ul><li><p>头文件<code>&lt;sstream&gt;</code>定义了<code>istringstream</code>, <code>ostringstream</code>, <code>stringstream</code>, 分别从 string 中读取数据，写入数据，读写数据。</p></li><li><p>以下介绍这些类中特有的功能：</p><blockquote><p><code>sstream</code>是头文件`<sstream>中定义的一个类型。</sstream></p></blockquote></li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>sstream::str()</code></td><td style="text-align:left">返回本对象中字符串的拷贝</td></tr><tr><td style="text-align:center"><code>sstream::str(s)</code></td><td style="text-align:left">将字符串 s 拷贝到本对象中</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
            <tag> test </tag>
            
            <tag> abc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/06/Hexo%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/09/06/Hexo%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-概述">1. 概述</a><ul><li><a href="#11-所需工具">1.1. 所需工具</a></li></ul></li><li><a href="#2-nodejs-安装及配置">2. node.js 安装及配置</a></li></ul><!-- /TOC --><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-所需工具"><a href="#1-1-所需工具" class="headerlink" title="1.1. 所需工具"></a>1.1. 所需工具</h2><ul><li>node.js</li><li>git</li><li>hexo</li></ul><h1 id="2-node-js-安装及配置"><a href="#2-node-js-安装及配置" class="headerlink" title="2. node.js 安装及配置"></a>2. node.js 安装及配置</h1><p>export PATH=$PATH:/home/Apps/node/bin</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/06/centos%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/06/centos%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h1><ul><li><p>查看系统版本号、linux 内核版本号</p>  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> /etc/redhat-release</span><br><span class="line"> </span><br><span class="line"><span class="keyword">cat</span> /proc/<span class="keyword">version</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><blockquote><p>使用 yum 管理软件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 root 用户的密码</span></span><br><span class="line">passwd root</span><br></pre></td></tr></table></figure><h1 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤出 /etc/passwd 文件中包含 root 的记录</span></span><br><span class="line">grep <span class="string">'root'</span> /etc/passwd</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 递归地过滤出 /var/log/ 目录中包含 linux 的记录</span></span><br><span class="line">grep -r <span class="string">'linux'</span> /var/<span class="built_in">log</span>/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用管道 连接 cat 和 grep 命令</span></span><br><span class="line">cat /etc/passwd | grep <span class="string">'root'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 重定向</span></span><br><span class="line"><span class="comment"># 可以使用 &gt; 或 &lt; 将命令的输出重定向到一个文件中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Hello World'</span> &gt; ~/test.txt</span><br><span class="line"> </span><br><span class="line"><span class="comment">##### ping</span></span><br><span class="line"><span class="comment"># 对 cloud.tencent.com 发送 4 个 ping 包，检查与其是否联通</span></span><br><span class="line">ping -c 4 cloud.tencent.com</span><br><span class="line"> </span><br><span class="line"><span class="comment">##### netstat</span></span><br><span class="line"><span class="comment"># 显示各种网络相关信息，如网络连接，路由表，接口状态等等</span></span><br><span class="line"><span class="comment"># 列出所有处于监听状态的 tcp 端口</span></span><br><span class="line">netstat -lt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看所有的端口信息，包括 PID 和进程名称</span></span><br><span class="line">netstat -tulpn</span><br><span class="line"> </span><br><span class="line"><span class="comment">##### ps</span></span><br><span class="line"><span class="comment"># 过滤得到当前系统中的 ssh 进程信息</span></span><br><span class="line">ps -aux | grep <span class="string">'ssh'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/06/%E6%90%AD%E5%BB%BA%20WordPress%20%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/09/06/%E6%90%AD%E5%BB%BA%20WordPress%20%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="相关网页"><a href="#相关网页" class="headerlink" title="相关网页"></a>相关网页</h1><ul><li>安装 Apache，MySQL，PHP 环境：<a href="http://www.jb51.net/article/51390.htm" target="_blank" rel="noopener">http://www.jb51.net/article/51390.htm</a></li><li>安装 vsftpd：<a href="http://www.cnblogs.com/xiongpq/p/3384759.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiongpq/p/3384759.html</a></li><li>安装 wordpress：<a href="http://www.jb51.net/article/51395.htm" target="_blank" rel="noopener">http://www.jb51.net/article/51395.htm</a></li></ul><h1 id="PHP-安装"><a href="#PHP-安装" class="headerlink" title="PHP 安装"></a>PHP 安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install php mysql-server php-mysql php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc</span><br></pre></td></tr></table></figure><h1 id="PuTTy"><a href="#PuTTy" class="headerlink" title="PuTTy"></a>PuTTy</h1><ul><li>使用 ssh 远程登录 linux 主机</li></ul><h2 id="显示中文"><a href="#显示中文" class="headerlink" title="显示中文"></a>显示中文</h2><ol><li>打开 putty 主程序，选择 window-〉Appearance-〉Font settings-〉Change…, 选择 Fixedsys 字体，字符集选择 CHINESE_GB2312。 （自己测试的是设置为 consolas 就行)</li><li>在 window-〉Appearance-〉Translation 中，Received data assumed to be in which character set 中，把 Use font encoding 改为 UTF-8.</li><li>打开 putty, 登录成功后，在 shell 中输入：export LC_ALL=’zh_CN.utf8’</li></ol><h1 id="安装-vsftpd"><a href="#安装-vsftpd" class="headerlink" title="安装 vsftpd"></a>安装 vsftpd</h1><ul><li>vsftpd 为 linux 的 ftp 服务器软件。使用 ftp 来传输 wordpress 安装包。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 重启服务</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; service vsftpd restart</span></span><br><span class="line">// 启动服务</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; service vsftpd start</span></span><br><span class="line">// 设置为开机自启动</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; sudo chkconfig vsftpd on</span></span><br><span class="line">// 查看已开启的网络服务</span><br><span class="line">// 使用前需下载 nmap</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; nmap 127.0.0.1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/06/%E6%90%AD%E5%BB%BA%20V2Ray%20%E7%BF%BB%E5%A2%99%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/09/06/%E6%90%AD%E5%BB%BA%20V2Ray%20%E7%BF%BB%E5%A2%99%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><ul><li>使用 centos 安装不成功。</li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>服务器：Debian 8.0 x86_64</li></ul><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ul><li><a href="https://toutyrater.github.io/prep/install.html" target="_blank" rel="noopener">https://toutyrater.github.io/prep/install.html</a></li><li><a href="https://www.v2ray.com/chapter_00/start.html" target="_blank" rel="noopener">https://www.v2ray.com/chapter_00/start.html</a></li><li><a href="https://lighti.me/3165.html" target="_blank" rel="noopener">https://lighti.me/3165.html</a></li></ul><h1 id="校准服务器时间"><a href="#校准服务器时间" class="headerlink" title="校准服务器时间"></a>校准服务器时间</h1><blockquote><p>V2Ray 的验证方式包含时间，所以需要保证服务器和客户端的时间误差在<strong>一分钟</strong>内。(V2Ray 会自动转换时区).<br>一般 BWG 的时间是不需要设置的，只需要修改本地时间和北京时间对应即可。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看时间</span></span><br><span class="line">date -R</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置时间</span></span><br><span class="line">sudo date --<span class="built_in">set</span>=<span class="string">"2018-01-01 13:11:11"</span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="生成-UUID"><a href="#生成-UUID" class="headerlink" title="生成 UUID"></a>生成 UUID</h1><ul><li>v2Ray 根据 UUID 格式的 ID 和 alterId 以及时间共同进行验证（类似于其他的账号和密码).</li><li>生成：<a href="https://www.uuidgenerator.net/" target="_blank" rel="noopener">https://www.uuidgenerator.net/</a>. 打开该网站或刷新，都会生成一条 UUID.</li></ul><h1 id="服务器安装"><a href="#服务器安装" class="headerlink" title="服务器安装"></a>服务器安装</h1><blockquote><p>推荐使用脚本安装</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wget https://install.direct/go.sh</span><br><span class="line"> </span><br><span class="line">sudo bash go.sh</span><br><span class="line"><span class="comment"># 出现 V2Ray v2.33 is installed. 类似字样表示安装成功</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动 V2Ray</span></span><br><span class="line">sudo systemctl start v2ray</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 停止 V2Ray</span></span><br><span class="line">sudo systemctl stop v2ray</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重启 V2Ray （更新 V2Ray 就是重新执行安装脚本)</span></span><br><span class="line">sudo systemctl restart v2ray</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbound"</span>: &#123;</span><br><span class="line">    "port": 16823, // 服务器监听端口</span><br><span class="line">    "protocol": "vmess",    // 主传入协议</span><br><span class="line">    "settings": &#123;</span><br><span class="line">      "clients": [</span><br><span class="line">        &#123;</span><br><span class="line">          "id": "自己的 ID",  // 用户 ID，客户端与服务器必须相同</span><br><span class="line">          "alterId": 64     // 额外 ID, 客户端与服务器必须相同</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "outbound": &#123;</span><br><span class="line">    "protocol": "freedom",  // 主传出协议</span><br><span class="line">    "settings": &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h1><p>客户端需要知道 vmess 服务器的信息如下：</p><ul><li>ip</li><li>port</li><li>用户 ID (id): UUID 形式的。</li><li>额外 ID (alterId): 一个数字</li></ul><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><blockquote><p>v2Ray, v2RayN</p><ul><li>下载 v2Ray: <a href="https://github.com/v2ray/v2ray-core/releases/latest" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core/releases/latest</a> 解压到 X 目录</li><li>下载 v2RayN: <a href="https://github.com/2dust/v2rayN/releases/latest" target="_blank" rel="noopener">https://github.com/2dust/v2rayN/releases/latest</a> 选择 v2rayN.exe, 拷贝到上一步的目录中。</li><li>在 v2RayN 中添加 vmess 服务器。</li></ul></blockquote><ul><li>Firefox 选择使用系统代理</li></ul><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><blockquote><p>V2RayX</p><ul><li>说明：<a href="https://233blog.com/post/25/" target="_blank" rel="noopener">https://233blog.com/post/25/</a></li><li>下载：<a href="https://github.com/insisttech/v2rayX-copy/releases" target="_blank" rel="noopener">https://github.com/insisttech/v2rayX-copy/releases</a> 选择 V2RayX.app.zip</li></ul></blockquote><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><blockquote><p>可用软件：v2RayNG 和 BifrostV</p></blockquote><ul><li>下载：github 地址：<a href="https://github.com/2dust/v2rayNG/releases" target="_blank" rel="noopener">https://github.com/2dust/v2rayNG/releases</a>, 选择 app-universal-release.apk</li><li>Windows V2RayN 中导出分享 URL, 导入到 v2RayNG 即可。</li></ul><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><blockquote><p>Kitsunebi<br>Shadowrocket</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/06/%E6%90%AD%E5%BB%BA%20ShowDoc%20%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/09/06/%E6%90%AD%E5%BB%BA%20ShowDoc%20%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>ShowDoc 是一个在线文档管理系统。支持 markdown 语法，很适合 IT 团队编写项目文档。</li><li><a href="http://blog.star7th.com/2016/05/2007.html" target="_blank" rel="noopener">http://blog.star7th.com/2016/05/2007.html</a></li></ul><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>centos 7</li></ul><h1 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### 安装 Nginx</span></span><br><span class="line"><span class="comment"># 使用 yum 安装 Nginx</span></span><br><span class="line">yum install nginx</span><br><span class="line"> </span><br><span class="line">修改 /etc/nginx/nginx.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  127.0.0.1;</span><br><span class="line">        root         /var/www/html;</span><br><span class="line">        index index.php index.html</span><br><span class="line">        error_page  404              /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">            root           /var/www/html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ /.ht &#123;</span><br><span class="line">            deny  all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动 Nginx 并设置为开机启动</span></span><br><span class="line">service nginx start</span><br><span class="line">chkconfig nginx on</span><br></pre></td></tr></table></figure><h1 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 yum 安装 php-fpm</span></span><br><span class="line">yum install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动 php-fpm 并设置为开机启动</span></span><br><span class="line">service php-fpm start</span><br><span class="line">chkconfig php-fpm on</span><br></pre></td></tr></table></figure><h1 id="下载安装-Composer"><a href="#下载安装-Composer" class="headerlink" title="下载安装 Composer"></a>下载安装 Composer</h1><ul><li>Composer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行如下命令 安装 Composer</span></span><br><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line">mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置 Composer 使用国内镜像</span></span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 Composer 创建项目</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html/ &amp;&amp; composer create-project  showdoc/showdoc</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置 showdoc 目录写权限</span></span><br><span class="line">chmod a+w showdoc/install</span><br><span class="line">chmod a+w showdoc/Sqlite</span><br><span class="line">chmod a+w showdoc/Sqlite/showdoc.db.php</span><br><span class="line">chmod a+w showdoc/Public/Uploads/</span><br><span class="line">chmod a+w showdoc/Application/Runtime</span><br><span class="line">chmod a+w showdoc/server/Application/Runtime</span><br><span class="line">chmod a+w showdoc/Application/Common/Conf/config.php</span><br><span class="line">chmod a+w showdoc/Application/Home/Conf/config.php</span><br></pre></td></tr></table></figure></li></ul><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建完毕，您现在可以通过浏览器访问 http:<span class="regexp">//</span><span class="number">119.29</span>.<span class="number">239.104</span><span class="regexp">/showdoc/i</span>nstall<span class="regexp">/ ，进行语言的选择以后即可通过 http:/</span><span class="regexp">/119.29.239.104/</span>showdoc 查看站点效果。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/06/%E6%90%AD%E5%BB%BA%20seafile%20%E7%BD%91%E7%9B%98/"/>
      <url>/2018/09/06/%E6%90%AD%E5%BB%BA%20seafile%20%E7%BD%91%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>seafile 是一个国人开发的，开源网盘服务。</li><li>官网：<a href="https://www.seafile.com/home/" target="_blank" rel="noopener">https://www.seafile.com/home/</a></li></ul><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>centos 7 64bit</li></ul><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 yum 安装 Python 和 MySQL.</span></span><br><span class="line">yum install python python-setuptools python-imaging python-ldap python-memcached MySQL-python mariadb mariadb-server</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动 MariaDB 服务</span></span><br><span class="line">sudo systemctl start mariadb.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mariadb.service</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置 MySQL （本人设置密码为 纯常用长数字)</span></span><br><span class="line"><span class="comment"># 配置 New password 和 Re-enter new password 字段，其他一路回车即可。</span></span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><h1 id="安装-seafile"><a href="#安装-seafile" class="headerlink" title="安装 seafile"></a>安装 seafile</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Seafile 安装包</span></span><br><span class="line">wget https://mc.qcloudimg.com/static/archive/3d8addbe52be88df4f6139ec7e35b453/seafile-server_5.1.4_x86-64.tar.gz</span><br><span class="line"> </span><br><span class="line">tar -zxvf seafile-server_5.1.4_x86-64.tar.gz</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装 Seafile 安装包</span></span><br><span class="line">sudo mkdir -p /opt/seafile/installed</span><br><span class="line">sudo mv seafile-server_5.1.4_x86-64.tar.gz /opt/seafile/installed</span><br><span class="line">sudo mv seafile-server-5.1.4/ /opt/seafile</span><br><span class="line"><span class="built_in">cd</span> /opt/seafile/seafile-server-5.1.4</span><br><span class="line"> </span><br><span class="line"><span class="comment"># [server name] 字段输入 Seafile</span></span><br><span class="line"><span class="comment"># [ This server's ip or domain ] 字段输入教程第一步申请的域名</span></span><br><span class="line"><span class="comment"># [ 1 or 2 ] 字段选择 1</span></span><br><span class="line"><span class="comment"># mysql 的 [ root password ] 字段输入 之前的密码</span></span><br><span class="line"><span class="comment"># Enter the password for mysql user "seafile": 输一个密码</span></span><br><span class="line"><span class="comment"># 其他字段一路回车使用默认值</span></span><br><span class="line"> </span><br><span class="line">sudo ./setup-seafile-mysql.sh</span><br></pre></td></tr></table></figure><h1 id="启动-Seafile-及修改防火墙规则"><a href="#启动-Seafile-及修改防火墙规则" class="headerlink" title="启动 Seafile 及修改防火墙规则"></a>启动 Seafile 及修改防火墙规则</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 Seafile</span></span><br><span class="line">sudo ./seafile.sh start</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 其中 [ admin email ] 设置为您登录网盘的帐号，如 admin@qcloudlab.wang，</span></span><br><span class="line"><span class="comment"># [ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如 admin_1yIv9sWO</span></span><br><span class="line"> </span><br><span class="line">sudo ./seahub.sh start</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改防火墙规则</span></span><br><span class="line">sudo firewall-cmd --zone=public --permanent --add-port=8082/tcp</span><br><span class="line">sudo firewall-cmd --zone=public --permanent --add-port=8000/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="访问-seafile"><a href="#访问-seafile" class="headerlink" title="访问 seafile"></a>访问 seafile</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用 ip 访问：<span class="link">http://</span>[<span class="string"> This server's ip or domain </span>] 中的 ip 或域名：8000</span><br><span class="line">输入之前设置的用户名和密码 zhaoyongCNSX@163.com  数字</span><br></pre></td></tr></table></figure><h1 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/rc.d/rc.local</span><br><span class="line"> </span><br><span class="line"># 增加以下</span><br><span class="line"> </span><br><span class="line">/<span class="keyword">opt</span>/seafile/seafile-server-<span class="number">5.1</span>.<span class="number">4</span>/seafile.<span class="keyword">sh</span> start</span><br><span class="line">/<span class="keyword">opt</span>/seafile/seafile-server-<span class="number">5.1</span>.<span class="number">4</span>/seahub.<span class="keyword">sh</span> start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/06/%E6%90%AD%E5%BB%BA%20Leanote%20%E7%AC%94%E8%AE%B0%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/09/06/%E6%90%AD%E5%BB%BA%20Leanote%20%E7%AC%94%E8%AE%B0%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-概述">1. 概述</a></li><li><a href="#2-安装-mongodb">2. 安装 MongoDB</a></li><li><a href="#3-安装-leanote">3. 安装 Leanote</a><ul><li><a href="#31-二进制安装">3.1. 二进制安装</a></li><li><a href="#32-源码安装">3.2. 源码安装</a></li></ul></li><li><a href="#4-为-mongodb-的-leanote-数据库设置账号和密码">4. 为 MongoDB 的 leanote 数据库设置账号和密码</a></li><li><a href="#5-设置-mongodb-和-leanote-开机自启动">5. 设置 mongodb 和 leanote 开机自启动</a></li></ul><!-- /TOC --><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><ul><li>环境：centos 7 64bit</li><li>所需依赖<ul><li>leanote 使用 MongoDB 存储</li></ul></li><li>安装路径<ul><li>安装包都存放于 <code>/home/tools/</code> 下。</li><li>MongoDB 和 leanote 均安装在<code>/home/Apps/</code>下</li><li>MongoDB 数据库路径：<code>/home/data/mongodb</code></li><li>MongoDB 和 leanote log 存放于：<code>/var/log/</code> 下</li></ul></li></ul><h1 id="2-安装-MongoDB"><a href="#2-安装-MongoDB" class="headerlink" title="2. 安装 MongoDB"></a>2. 安装 MongoDB</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### 下载 MongoDB</span></span><br><span class="line"><span class="built_in">cd</span> /home/tools</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 wget 下载。也可使用附件中的包。</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</span><br><span class="line"> </span><br><span class="line">tar -xzvf mongodb-linux-x86_64-3.0.1.tgz</span><br><span class="line">mv mongodb-linux-x86_64-3.0.1 /home/Apps/mongodb</span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 创建用于存储的文件夹目录</span></span><br><span class="line">mkdir -p /home/data/mongodb</span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 配置 MongoDB 的环境变量：</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 在文件末尾追加</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/Apps/mongodb/bin</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行以下命令，使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 启动 MongoDB( 先不使用 --auth 校验用户密码 方式启动)</span></span><br><span class="line">mongod --dbpath=/home/data/mongodb --logpath=/var/<span class="built_in">log</span>/mongod.log -logappend --port=27017 --fork</span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 测试是否启动完成</span></span><br><span class="line"><span class="comment"># 新打开一个终端</span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line">&gt; show dbs</span><br></pre></td></tr></table></figure><h1 id="3-安装-Leanote"><a href="#3-安装-Leanote" class="headerlink" title="3. 安装 Leanote"></a>3. 安装 Leanote</h1><blockquote><ul><li>安装完成后，可以在浏览器输入：<code>http://47.92.146.3:9000</code> <code>admin</code> <code>abc123</code> 登录管理账号。马上修改密码。</li></ul></blockquote><h2 id="3-1-二进制安装"><a href="#3-1-二进制安装" class="headerlink" title="3.1. 二进制安装"></a>3.1. 二进制安装</h2><blockquote><ul><li>也可使用附近中的二进制包，或在 github 下载最新二进制包</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/tools</span><br><span class="line"> </span><br><span class="line"><span class="comment">###### 下载 Leanote 二进制包</span></span><br><span class="line">wget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz</span><br><span class="line"> </span><br><span class="line">tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz</span><br><span class="line">mv leanote /home/Apps/</span><br><span class="line"> </span><br><span class="line"><span class="comment">###### 编辑 Leanote 配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /home/Apps/leanote</span><br><span class="line"> </span><br><span class="line">vim conf/app.conf</span><br><span class="line"><span class="comment"># 修改 app.secret= 字段的值（修改几个字符即可).</span></span><br><span class="line"><span class="comment"># 修改 site.url=http://47.92.146.3:9000</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 初始化数据库</span></span><br><span class="line">mongorestore -h localhost -d leanote --dir /home/Apps/leanote/mongodb_backup/leanote_install_data/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line"><span class="comment"># 另起一个窗口，连接 mongod</span></span><br><span class="line">mongo</span><br><span class="line"> </span><br><span class="line">&gt; show dbs</span><br><span class="line"><span class="comment"># 发现新增了 leanote 数据库</span></span><br><span class="line">&gt; use leanote</span><br><span class="line">&gt; show collections <span class="comment"># 查看表（有很多表，其中 user 表中有两项数据，admin 和 demo)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 后台启动 Leanote 服务</span></span><br><span class="line">nohup /bin/bash /home/Apps/leanote/bin/run.sh &gt;&gt; /var/<span class="built_in">log</span>/leanote.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="3-2-源码安装"><a href="#3-2-源码安装" class="headerlink" title="3.2. 源码安装"></a>3.2. 源码安装</h2><h1 id="4-为-MongoDB-的-leanote-数据库设置账号和密码"><a href="#4-为-MongoDB-的-leanote-数据库设置账号和密码" class="headerlink" title="4. 为 MongoDB 的 leanote 数据库设置账号和密码"></a>4. 为 MongoDB 的 leanote 数据库设置账号和密码</h1><ul><li>为了增加安全性，需要给 leanote 数据库设置账号和密码</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line"> </span><br><span class="line">&gt; use leanote;</span><br><span class="line"> </span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">'yourpassword'</span>,</span><br><span class="line">    roles: [&#123;role: <span class="string">'dbOwner'</span>, db: <span class="string">'leanote'</span>&#125;]</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 测试：</span></span><br><span class="line">&gt; db.auth(<span class="string">"root"</span>, <span class="string">"yourpassword"</span>); <span class="comment"># 使用账号密码登录。（返回 1 表示成功)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 重启 mongodb</span></span><br><span class="line"><span class="comment"># 安全退出</span></span><br><span class="line">&gt; use admin</span><br><span class="line">&gt; db.shutdownServer()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 --auth 参数启动。</span></span><br><span class="line">mongod --dbpath=/home/data/mongodb --logpath=/var/<span class="built_in">log</span>/mongod.log -logappend --auth --port=27017 --fork</span><br><span class="line"> </span><br><span class="line"><span class="comment">##### 设置 leanote</span></span><br><span class="line">vim conf/app.conf</span><br><span class="line"><span class="comment"># 修改这两项</span></span><br><span class="line">db.username=root <span class="comment"># if not exists, please leave it blank</span></span><br><span class="line">db.password=yourpassword <span class="comment"># if not exists, please leave it blank</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重启 leanote</span></span><br><span class="line">ps -ef | grep leanote</span><br><span class="line"><span class="built_in">kill</span> -9 pid 号</span><br><span class="line">nohup /bin/bash /home/Apps/leanote/bin/run.sh &gt;&gt; /var/<span class="built_in">log</span>/leanote.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h1 id="5-设置-mongodb-和-leanote-开机自启动"><a href="#5-设置-mongodb-和-leanote-开机自启动" class="headerlink" title="5. 设置 mongodb 和 leanote 开机自启动"></a>5. 设置 mongodb 和 leanote 开机自启动</h1><blockquote><p>将后台启动命令增加到 /etc/rc.local 文件中即可。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加 mongodb 自启动</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/home/Apps/mongodb/bin/mongod --dbpath=/home/data/mongodb --logpath=/var/log/mongod.log -logappend --auth -port=27017 --fork"</span> &gt;&gt; /etc/rc.local</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 增加 leanote 开机自启动</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"nohup /bin/bash /home/Apps/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp;"</span> &gt;&gt; /etc/rc.local</span><br><span class="line"> </span><br><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/06/hello-world/"/>
      <url>/2018/09/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
